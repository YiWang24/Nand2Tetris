// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // if (zx == 1) sets x = 0    
    Mux16(a=x , b=false , sel= zx , out= xZero );
    // if (nx == 1) sets x = !x  
    Not16(in= xZero , out= xNot);
    Mux16(a=xZero , b=xNot , sel= nx , out= xZeroOrNot );

    // if (zy == 1) sets y = 0   
    Mux16(a=y , b=false , sel= zy , out= yZero );
    // if (ny == 1) sets y = !y     
    Not16(in= yZero , out= yNot);
    Mux16(a=yZero , b=yNot , sel= ny , out= yZeroOrNot );

    // if (f == 1)  sets out = x + y 
    Add16(a = xZeroOrNot, b = yZeroOrNot, out = xAddy );
    // if (f == 0)  sets out = x & y
    And16(a = xZeroOrNot , b = yZeroOrNot, out = aAndy );
    Mux16(a=aAndy , b=xAddy , sel= f , out= fxy );

    // if (no == 1) sets out = !out
    Not16(in= fxy , out= notFxy );
    // if (out < 0)  ng = 1, else ng = 0 
    Mux16(a=fxy , b=notFxy , sel= no , out= out,out[0..7]=out0to7, out[8..15]=out8to15, out[15]=ng);

    //  if (out == 0) zr = 1, else zr = 0
    Or8Way(in= out0to7, out= or0to7 );
    Or8Way(in= out8to15, out= or8to15 );
    Or(a= or0to7, b= or8to15, out= or0to15);
    Not(in=or0to15 , out=zr );
}